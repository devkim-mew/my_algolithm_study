import sys
sys.stdin = open("input.txt", "r")

"""
오렌지와 블루가 서로다른 복도에 갖혀 실험을 당한다
복도에는 100개의 버튼이 존재, 버튼은 1~100이하 정수로 구성
버튼 k는 시작점부터 k미터 떨어짐
시작은 버튼 1에서 시작함 => 1번 버튼은 1만큼 떨어진 것이고 
시작은 0부터인 것

버튼 한칸 움직일 때 1m/s
버튼 누를 떄 1초
하나의 테스트는 여러개의 버튼 수열로 표시됨
로봇들이 수열에 표시된 순서대로 버튼을 눌러야 함을 뜻함(입력 동작관련 나열된 형태)
버튼은 O x B x 형태로 주어지는데 오렌지가 버튼 누르고 블루가 버튼 누르는 것
두 로봇은 동시에 못 누름
두 로봇은 수열을 정확히 알고 있음


버튼의 갯수는 1~100까지
시작점은 0
K버튼은 시작점에서 K만큼 떨어져 있음
버튼 1칸씩 움직일 때 1초
버튼을 누를 떄 1초
아무것도 안하는 경우도 있음

O x B x 형태로 어떤 값이 나열됨
O x : 오렌지가 x를 누르러 가야 함을 의미
B x : 블루가 x를 누르러 가야 함을 의미
두 로봇은 본인이 누르는 버튼을 알고 있음
=> 동시에 이동이 가능함

근데 수열 순서에 따라 앞선 로봇이 버튼을 누르지 않으면 뒷 순서 로봇은 버튼을 누를 수 없다
즉, 누를 떄까지 기다려야 한다

수열대로 행동할 떄 가장 짧은 시간을 구하는 것이 목적인 것!!!

입력
N 버튼 갯수
O x B x 주어짐 x는 1~100
"""

"""
O 5 B 4 / O 5 B 5
=> O 5칸 을 이동하는 동안 B는 버튼을 누르기 위해 대기

O 3 B 5 
=> O가 이동하고 버튼을 눌러도 B는 대기를 하지 않아도 됨
=> 남는 시간에 O는 이동할 수 있음

B 3 B 2 O 5 
=> O 5 B 5 와 동일한 동작이 됨
=> 작업량에 따라 뒤에 있는 작업자가 기다려야 하는지를 알아야

작업자의 순서를 확인!!
작업자의 이동하는 거리를 확인!!
버튼 누르는 시간을 확인!!


무엇을 구현해야 하나???
이전에 이동한 로봇이 현재 이동 로봇이랑 같은지 아닌지를 판단


이전에 이동한 로봇이 같은 경우 => 거리를 누적해서 체크

이전에 이동한 로봇이 다른 경우 
    => 거리의 차이로 대기할지(시간이 남아 대기하는지) 아니면 남는 이동이 있는지 확인

이전에 이동한 로봇이 현재 로봇보다 더 많이 움직인 경우 
    => 대기하면서 버튼만 누르면 됨

이전에 이동한 로봇이 현재 로봇보다 더 작게 움직인 경우    
    => 추가로 이동할 거리를 계산
    (현재 로봇이 이동할 횟수 - 이전 로봇이 이동한 횟수)

이전에 이동한 로봇이 현재 이동할 로봇과 같은 경우
    => 이동할 거리를 누적
    
"""

T = int(input())
# 여러개의 테스트 케이스가 주어지므로, 각각을 처리합니다.
for test_case in range(1, T + 1):
    # 삼항연산자를 써보자(조건 표현식)
    N, *work_list = map(lambda x: int(x) if x.isnumeric() else x ,input().split()) # 구분해서 나옴
    print(N, work_list)

    before_robot = [None, 0] # 이전에 이동한 작업로봇을 저장(로봇, 이동에 소모한 시간)
    # 두 로봇의 위치
    location = {
        "B": 1,
        "O": 1
    }
    result = 0 # 현재 작업량
    # 이전에 이동한 로봇이 같은 로봇인지 판단

    for i in range(N): # 작업 버튼 개수 만큼 반복
        robot = work_list[i*2]  # 짝수 번째가 작업자의 위치
        target = work_list[i*2+1]  # 현재 작업자의 목표 버튼 위치

        # 이동거리 (결국 시간이기 떄문에 양수 절대값으로 계산)
        move = abs(location[robot] - target)
        location[robot] = target

        # 이전에 이동한 로봇이 다른 경우
        #     => 거리의 차이로 대기할지(시간이 남아 대기하는지) 아니면 남는 이동이 있는지 확인
        if robot != before_robot[0]:
            # 이전에 이동한 로봇이 현재 로봇보다 더 많이 움직인 경우
            # => 대기하면서 버튼만 누르면 됨

            if move < before_robot[1]:
                result += 1  # 대기하고 버튼만 누르면 되는 상황
                # 이제는 버튼을 누른 로봇이 이전 작업자
                before_robot = [robot, 1]  # 이동을 하지 않고 버튼만 눌렀기 때문에 1초 소모(버튼 == 이동)

            else:
                # 이전에 이동한 로봇이 현재 로봇보다 더 작게 움직인 경우
                # => 남은 거리 만큼 추가 이동이 필요, 추가로 이동할 거리를 계산
                # (현재 로봇이 이동할 횟수 - 이전 로봇이 이동한 횟수 + 버튼 누른시간 1초)
                remain = move - before_robot[1] + 1
                result += remain
                # 현재 작업 로봇 정보와 이동에 소모한 시간을 저장
                before_robot = [robot, remain]

        else:
            # 이전에 이동한 로봇이 현재 이동할 로봇과 같은 경우
            #     => 이동할 거리를 누적
            result += move + 1
            before_robot[1] += move + 1  # 이전 작업자의 작업거리를 누적

    print(f"#{test_case}", result)
